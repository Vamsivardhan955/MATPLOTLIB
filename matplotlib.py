# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AsHL3HmR19Xb29m0nn3i669vjkDI2tgV
"""

!pip install matplotlib

import matplotlib.pyplot as plt
import numpy as np

"""create an array for x values"""

x=np.linspace(start=-10 ,stop=10, num=400)

"""define the linear equation"""

m=2
c=3
y=m*x +c

"""plot the equation"""

plt.plot(x,y,label='y=2x+3')
plt.title('plot of the linear equaltion')
plt.xlabel('x')
plt.ylabel('y')
plt.xlim(0,10)
plt.ylim(0,20)
plt.grid(True)
plt.legend()
plt.savefig('linear.png')
plt.show()

# Define the coefficients
a = 1
b = -4
c = 4

# Generate x values
x = np.linspace(-1, 7, 400)

# Calculate y values using the quadratic equation
y = a * x**2 + b * x + c

# Create the plot
plt.plot(x, y, label='y = x^2 - 4x + 4')

# Adding title and labels
plt.title('Plot of the Quadratic Equation')
plt.xlabel('x')
plt.ylabel('y')

plt.xlim(-5,10)
plt.ylim(0,30)

plt.legend()
# Add grid
plt.grid(True)

# Show the plot
plt.show()

"""creating a figure"""

# Create a figure object
fig = plt.figure()

# Add axes to the figure (left, bottom, width, height)
ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])

# Display the figure
plt.show()

# Creating an array of x values
x = np.linspace(0, 10, 100)
# Calculating y values based on x
y = np.sin(x)

# Create a new figure with a specific size
fig = plt.figure(figsize=(8, 6))

# Add an axes to the figure
# The list [left, bottom, width, height] defines the dimensions of the axes within the figure
ax = fig.add_axes([0.1, 0.1, 0.85, 0.85])

# Plot data on the axes
ax.plot(x, y, label='sin(x)', color='green')

# Set the title of the plot
ax.set_title('Simple Plot of sin(x)')
ax.legend()
# Set the x and y axis labels
ax.set_xlabel('x')
ax.set_ylabel('Amplitude')

# Display the figure
plt.show()

# Generate x values
x = np.linspace(0, 10, 100)

# Create a blank canvas
fig = plt.figure(figsize=(10, 8))


# Center plot - main plot
axes_center = fig.add_axes([0.3, 0.3, 0.4, 0.4])  # left, bottom, width, height
axes_center.plot(x, x + 1)  # y = x + 1
axes_center.set_title('Center Plot: y = x + 1')

# Top plot - summary
axes_top = fig.add_axes([0.3, 0.75, 0.4, 0.2])
axes_top.plot(x, 2*x + 1)  # y = 2x + 1
axes_top.set_title('Top Plot: y = 2x + 1')

# Right plot - auxiliary data
axes_right = fig.add_axes([0.75, 0.3, 0.2, 0.4])
axes_right.plot(x, 0.5*x + 1)  # y = 0.5x + 1
axes_right.set_title('Right Plot: y = 0.5x + 1')

# Left plot - contextual information
axes_left = fig.add_axes([0.05, 0.3, 0.2, 0.4])
axes_left.plot(x, 3*x + 1)  # y = 3x + 1
axes_left.set_title('Left Plot: y = 3x + 1')

# Bottom plot - comparative data
axes_bottom = fig.add_axes([0.3, 0.05, 0.4, 0.2])
axes_bottom.plot(x, -x + 1)  # y = -x + 1
axes_bottom.set_title('Bottom Plot: y = -x + 1')

# Top Right Corner plot - highlight
axes_top_right = fig.add_axes([0.75, 0.75, 0.2, 0.2])
axes_top_right.plot(x, 4*x + 1)  # y = 4x + 1
axes_top_right.set_title('Top Right Plot: y = 4x + 1')

plt.show()

# Generate x values
x = np.linspace(0, 10, 100)

# Create a blank canvas
fig = plt.figure(figsize=(10, 8))

# Center plot - main plot
axes_center = fig.add_axes([0,0, 0.4, 0.4])  # left, bottom, width, height
axes_center.plot(x, x + 1)  # y = x + 1
axes_center.set_title('Center Plot: y = x + 1')

axes_example = fig.add_axes([1,1, 0.1, 0.1])
axes_example.plot(x, 4*x + 1)  # y = 4x + 1
axes_example.set_title('Example Plot: y = 4x + 1')

plt.show()

"""subplot

"""

fig,ax=plt.subplots()
ax.plot([1,2,3,4,5],[1,4,9,16,25],label ="y=x^2")
ax.legend()
plt.show()

# Create a 2x2 grid of subplots
fig, axs = plt.subplots(2, 2)  # 2 rows, 2 columns

# Plot data in each subplot
axs[0, 0].plot([1, 2, 3, 4, 5], [1, 4, 9, 16, 25])  # Top-left
axs[0, 1].plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])    # Top-right
axs[1, 0].plot([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])    # Bottom-left
axs[1, 1].plot([1, 2, 3, 4, 5], [25, 16, 9, 4, 1])   # Bottom-right

#adjust layout
plt.tight_layout()
# Show the plot
plt.show()

"""Experimenting with Subplot Parameters: You can adjust a multitude of parameters to customize the appearance and functionality of subplots.

Common Parameters:

figsize: Tuple of width and height in inches to specify the size of the figure.
dpi: Dots per inch, resolution of the figure.
sharex, sharey: If set to True, subplots share the x or y axis.
subplot_kw: Dictionary of keywords passed to the add_subplot() call used to create each subplot.
"""

# Create a grid of subplots with shared y-axis and custom size
fig, axs = plt.subplots(2, 2, figsize=(10, 8), dpi=100, sharey=True, subplot_kw={'facecolor': 'lightgray'})

# Plotting
axs[0, 0].plot([1, 2, 3, 4, 5], [1, 4, 9, 16, 25])
axs[0, 1].plot([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])
axs[1, 0].plot([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])
axs[1, 1].plot([1, 2, 3, 4, 5], [25, 16, 9, 4, 1])

# Adjust layout
plt.tight_layout()

# Show the plot
plt.show()

"""Plot Styles
Matplotlib includes a variety of pre-defined styles that can be used to quickly change the aesthetics of your plots.

https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html
"""

plt.style.use("ggplot")
plt.plot([1,2,3,4,5],[1,4,9,16,25])
plt.show()

"""setting color"""

plt.plot([1,2,3,4],[10,20,30,40],color="red")
plt.plot([1,2,3,4],[40,30,20,10],color="green")
plt.show()

help(plt.legend)

# Plot data
plt.plot([1, 2, 3, 4], [10, 15, 20, 25], label='Line 1')
plt.plot([1, 2, 3, 4], [25, 20, 15, 10], label='Line 2')

# Add a legend
plt.legend(loc="upper left")

# Show plot
plt.show()

"""Line Widths"""

# Plot with different line widths
plt.plot([1, 2, 3, 4], [10, 20, 30, 40], linewidth=2)  # Normal width
plt.plot([1, 2, 3, 4], [40, 30, 20, 10], linewidth=8)  # Thicker line

# Show plot
plt.show()

"""Line Types
The style of the line (solid, dashed, dotted, etc.) can be set to distinguish different plots.

https://matplotlib.org/stable/gallery/lines_bars_and_markers/linestyles.html
"""

# Plot with different line types
plt.plot([1, 2, 3, 4], [10, 20, 30, 40], linestyle='-')  # Solid line
plt.plot([1, 2, 3, 4], [40, 30, 20, 10], linestyle='--')  # Dashed line

# Show plot
plt.show()

"""Markers
Markers can be used to highlight individual data points on a line or scatter plot.

https://matplotlib.org/stable/api/markers_api.html
"""

# Plot with markers
plt.plot([1, 2, 3, 4], [10, 20, 30, 40], marker='o')  # Circle markers

# Show plot
plt.show()

# Plot combining line styles, markers, and colors
plt.plot([1, 2, 3, 4], [10, 20, 30, 40], linestyle='--', marker='o', color='blue')

# Show plot
plt.show()

# Plot with customized markers
plt.plot([1, 2, 3, 4], [10, 20, 30, 40], marker='s', markersize=10, markerfacecolor='green')

# Show plot
plt.show()

"""Using the zorder Parameter
The zorder parameter determines the drawing order of plot elements.
"""

# Plot with zorder
plt.plot([1, 2, 3, 4], [40, 30, 20, 10], color='red', linewidth=5, zorder=1)  # Drawn first
plt.plot([1, 2, 3, 4], [10, 20, 30, 40], color='blue', linewidth=5, zorder=2)  # Drawn on top
plt.plot([1, 2, 3, 4], [10, 13, 15, 17], color='green', linewidth=5, zorder=3) # Drawn on top of blue

# Show plot
plt.show()

"""Matplotlib Bar Graphs
Bar graphs are a powerful tool for visualizing categorical data, where each category is represented by a bar whose height (or length, in the case of horizontal bars) corresponds to its value. Matplotlib provides extensive functionality to customize bar graphs according to your data visualization needs.

Example: Creating a Simple Bar Graph
"""

# Data
categories = ['Category A', 'Category B', 'Category C']
values = [10, 15, 7]

# Creating bar graph
plt.bar(categories, values)

# Adding title and labels
plt.title('Basic Bar Graph')
plt.xlabel('Categories')
plt.ylabel('Values')

# Show plot
plt.show()

"""Example: Creating a Horizontal Bar Graph Sometimes data is better represented horizontally, especially if category names are long."""

# Data
categories = ['Category A', 'Category B', 'Category C']
values = [10, 15, 7]

# Creating horizontal bar graph
plt.barh(categories, values, color='skyblue')

# Adding title and labels
plt.title('Horizontal Bar Graph')
plt.xlabel('Values')
plt.ylabel('Categories')

# Show plot
plt.show()

help(plt.bar) #Example: Bars with Different Colors and Borders

#Customizing the colors and borders can help in distinguishing bars, especially in presentations.

# Data
categories = ['Category A', 'Category B', 'Category C']
values = [10, 15, 7]

# Creating bar graph
plt.bar(categories, values, color=['red', 'green', 'blue'], edgecolor='black')

# Adding title and labels
plt.title('Colored Bar Graph')
plt.xlabel('Categories')
plt.ylabel('Values')

# Show plot
plt.show()

"""Example: Creating Stacked Bar Graphs

Stacked bar graphs are useful to show segmented data within the same category.
"""

# Data
categories = ['Category A', 'Category B', 'Category C']
values1 = [10, 15, 7]
values2 = [5, 3, 2]

# Creating stacked bar graph
plt.bar(categories, values1, label='Part 1')
plt.bar(categories, values2, bottom=values1, label='Part 2')

# Adding title, labels, and legend
plt.title('Stacked Bar Graph')
plt.xlabel('Categories')
plt.ylabel('Values')
plt.legend()

# Show plot
plt.show()

"""Example: Creating Grouped Bar Graphs

Grouped bar graphs show multiple data groups side by side for easy comparison
"""

# Data
categories = ['Category A', 'Category B', 'Category C']
values1 = [10, 15, 7]
values2 = [5, 3, 2]
x = np.arange(len(categories))  # the label locations

# Width of the bars
width = 0.35

# Creating grouped bar graph
plt.bar(x - width/2, values1, width, label='Part 1') #x-width/2(adjustment b/w red and blue)
plt.bar(x + width/2, values2, width, label='Part 2')

# Adding title, labels, and legend
plt.title('Grouped Bar Graph')
plt.xlabel('Categories')
plt.ylabel('Values')
plt.xticks(x, categories)
plt.legend()

# Show plot
plt.show()

"""Example: Adding Error Bars

Error bars can be used to indicate the variability of data and are often necessary for scientific plotting.
"""

# Data
categories = ['Category A', 'Category B', 'Category C']
values = [10, 15, 7]
errors = [1, 2, 1.5]

# Creating bar graph with error bars
plt.bar(categories, values, yerr=errors, capsize=5)

# Adding title and labels
plt.title('Bar Graph with Error Bars')
plt.xlabel('Categories')
plt.ylabel('Values')

# Show plot
plt.show()

